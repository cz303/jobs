from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from collections import defaultdict
import itertools

__all__ = ['Markup']


class Markup:
    def __init__(self):
        self.markup = ReplyKeyboardMarkup()
        self.markup.resize_keyboard = True
        self.markup.one_time_keyboard = True

        self.inline = InlineKeyboardMarkup()

    def send(self, texts: list, inline=None):
        if inline:
            for text in texts:
                if text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å!':
                    self.inline.add(InlineKeyboardButton(
                        text=text,
                        callback_data=text,
                        url='https://t.me/share/url?url=https%3A//telegram'
                            '.me/RS_Work_bot'))
                    return self.inline

                self.inline.add(InlineKeyboardButton(text=text,
                                                     callback_data=text))
            return self.inline

        for text in texts:
            if text == '–ú–æ–π —Å—á–µ—Ç':
                self.markup.row(
                    KeyboardButton(text=text, request_contact=True))
            else:
                self.markup.row(KeyboardButton(text=text))
        return self.markup

    def start_menu(self):
        texts = ['üè¨ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', 'üë®‚Äçüíª –†–∞–±–æ—Ç–Ω–∏–∫']
        return self.send(texts)

    def employer(self):
        texts = ['üì¨ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º', '–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', '–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏',
                 '–ú–æ–π —Å—á–µ—Ç', '–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?', 'üè¨ –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']
        return self.send(texts)

    def worker(self):
        texts = ['üì¨ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º', '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ', '–ú–æ–∏ —Ä–µ–∑—é–º–µ',
                 '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', '–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?', 'üè¨ –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']
        return self.send(texts)

    def tell_friends(self):
        texts = ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å!']
        return self.send(texts=texts, inline=True)

    @classmethod
    def get_data(cls):
        data = defaultdict(list)
        data['1. HR, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            '–†–µ–∫—Ä—É—Ç–µ—Ä',
            '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä',
            '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
            '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞',
            '–ü—Å–∏—Ö–æ–ª–æ–≥',
            '–ò–Ω–∂–µ–Ω–µ—Ä']
        data['2. IT, WEB —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            'CEO | Product Manager',
            '‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚ÄãJava',
            'C# | .NET',
            'JavaScript | Front-End | HTML',
            'Node.js',
            'PHP',
            'Python',
            'Ruby',
            'Android',
            'iOS | macOS',
            'C | C++ | Embedded',
            'Golang',
            'Scala',
            '–î–∏–∑–∞–π–Ω–µ—Ä–∏ | UI | UX',
            'QA Automation | Manual',
            'Project Manager',
            'DevOps | Sysadmin']
        return data

    @property
    def categories(self):
        return list(map(lambda x: x, self.get_data().keys()))

    @property
    def get_sub_categories(self):
        return list(itertools.chain(*self.get_data().values()))

    def send_categories(self):
        return self.send(self.categories, inline=True)

    def get_category(self, category: str):
        return defaultdict(list, filter(lambda x: x[0] == category,
                                        self.get_data().items()))

    def send_sub_category(self, category):
        return self.send(self.get_category(
            category=category).get(category, []), inline=True)

    def write_to_employer(self):
        texts = ['–ì–¥–µ –∏—Å–∫–∞—Ç—å username?']
        return self.send(texts=texts, inline=True)
