from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from collections import defaultdict
import itertools

__all__ = ('Markup',)


class Markup:
    def __init__(self):
        self.markup = ReplyKeyboardMarkup()
        self.markup.resize_keyboard = True
        self.markup.one_time_keyboard = True

        self.inline = InlineKeyboardMarkup()

    def send(self, texts=None, callback_data=None, inline=None, url=None):
        if isinstance(callback_data, list):
            for k, v in callback_data:
                self.inline.add(InlineKeyboardButton(text=k, callback_data=v))
            return self.inline

        if inline:
            for text in texts:
                if text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å!':
                    self.inline.add(InlineKeyboardButton(
                        text=text,
                        callback_data=callback_data or text,
                        url='https://t.me/share/url?url=https%3A//telegram'
                            '.me/RS_Work_bot'))
                    return self.inline
                elif text == '–û–ø–ª–∞—Ç–∏—Ç—å':
                    self.inline.add(InlineKeyboardButton(
                        text=text,
                        callback_data=callback_data or text,
                        url=url
                    ))
                    return self.inline

                self.inline.add(InlineKeyboardButton(text=text,
                                                     callback_data=text))
            return self.inline

        for text in texts:
            if text == '–ú–æ–π —Å—á–µ—Ç':
                self.markup.row(
                    KeyboardButton(text=text, request_contact=True))
            else:
                self.markup.row(KeyboardButton(text=text))
        return self.markup

    def start_menu(self):
        texts = ['üè¨ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', 'üë®‚Äç –†–∞–±–æ—Ç–Ω–∏–∫']
        return self.send(texts)

    def employer(self):
        texts = ['üì¨ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º', '–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', '–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏',
                 '–ú–æ–π —Å—á–µ—Ç', '–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?', 'üè¨ –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']
        return self.send(texts)

    def worker(self):
        texts = ['üì¨ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º', '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ', '–ú–æ–∏ —Ä–µ–∑—é–º–µ',
                 '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π', '–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?', 'üè¨ –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç']
        return self.send(texts)

    def tell_friends(self):
        texts = ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å!']
        return self.send(texts=texts, inline=True)

    @classmethod
    def get_data(cls):
        data = defaultdict(list)
        data['1. IT, WEB —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            'CEO',
            'Product Manager',
            '‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚ÄãJava',
            'C# | .NET',
            'JavaScript',
            'Node.js',
            'PHP',
            'Python',
            'Ruby',
            'Android',
            'iOS | macOS',
            'C | C++',
            'Golang',
            'Scala',
            '–î–∏–∑–∞–π–Ω–µ—Ä',
            'QA Automation | Manual',
            'Project Manager',
            'DevOps | Sysadmin']
        data['2. –†–∞–±–æ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–°—Ç–∞–∂—ë—Ä',
            '–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
            '–ö–∞—Å—Å–∏—Ä',
            '–ê–Ω–∏–º–∞—Ç–æ—Ä',
            '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç–µ–ª—å –ª–∏—Å—Ç–æ–≤–æ–∫',
            '–ö—É—Ä—å–µ—Ä',
        ]
        data['3. –î–∏–∑–∞–π–Ω, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–§–æ—Ç–æ–≥—Ä–∞—Ñ',
            '–î–∏–∑–∞–π–Ω–µ—Ä',
            '–•—É–¥–æ–∂–Ω–∏–∫',
            '3D –º–æ–¥–µ–ª—å–µ—Ä-—Ç–µ–∫—Å—Ç—É—Ä—â–∏–∫',
            '–§–ª–æ—Ä–∏—Å—Ç',
            '–ó–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—ë—Ä',
            '–†–µ–∂–∏—Å—Å—ë—Ä',
            '–°—Ü–µ–Ω–∞—Ä–∏—Å—Ç',
            '–ú—É–∑—ã–∫–∞–Ω—Ç',
            '–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ',
            '–ú–æ–¥–µ–ª—å',
            '–ê–∫—Ç–µ—Ä',
        ]
        data['4. –†–µ–∫–ª–∞–º–∞'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä',
            '–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä',
            '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π-–¥–∏—Ä–µ–∫—Ç–æ—Ä',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–µ–∫–ª–∞–º–µ',
            '–°–æ—Ü–∏–æ–ª–æ–≥',
            '–ü—Ä–æ–º–æ—É—Ç–µ—Ä',
            '–ú–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä',
        ]
        data['5. –î–æ—Å—Ç–∞–≤–∫–∞, —Å–∫–ª–∞–¥'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–ö—É—Ä—å–µ—Ä',
            '–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä',
            '–ö–ª–∞–¥–æ–≤—â–∏–∫',
            '–ó–∞–≤–µ–¥—É—é—â–∏–π —Å–∫–ª–∞–¥–æ–º',
            '–†–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞',
            '–ú–∞—Ä–∫–∏—Ä–æ–≤—â–∏–∫',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫ - –ª–æ–≥–∏—Å—Ç–∏–∫',
            '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º',
            '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–≥—Ä—É–∑—á–∏–∫–∞'
        ]
        data['6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            '–†–µ–∫—Ä—É—Ç–µ—Ä',
            '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä',
            '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
            '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞',
            '–ü—Å–∏—Ö–æ–ª–æ–≥',
            '–ò–Ω–∂–µ–Ω–µ—Ä']
        data['7. –¢—É—Ä–∏–∑–º –∏ —Å–ø–æ—Ä—Ç'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–≠–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            '–¢—Ä–µ–Ω–µ—Ä –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª',
            '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
        ]
        data['8. –ì–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–ì–æ—Ä–Ω–∏—á–Ω–∞—è',
            '–£–±–æ—Ä—â–∏—Ü–∞ –≤ —Ö–æ—Å—Ç–µ–ª',
            '–®–≤–µ–π—Ü–∞—Ä',
            '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –æ—Ç–µ–ª–µ–º'
        ]
        data['9. –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–û–±–≤–∞–ª—å—â–∏–∫ –º—è—Å–∞',
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            '–û—Ñ–∏—Ü–∏–∞–Ω—Ç',
            '–ë–∞—Ä–º–µ–Ω',
            '–®–µ—Ñ',
            '–ü–æ–≤–∞—Ä',
            '–ú–∞–Ω–≥–∞–ª—å—â–∏–∫',
            '–ö–æ–Ω–¥–∏—Ç–µ—Ä | –ü–µ–∫–∞—Ä—å',
            '–ü–∏—Ü—Ü–∞–π–æ–ª–æ',
            '–°—É - —à–µ—Ñ',
            '–°—É—à–∏—Å—Ç',
        ]
        data['10. –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–í–æ–¥–∏—Ç–µ–ª—å',
            '–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä',
            '–ê–≤—Ç–æ—Å–ª–µ—Å–∞—Ä—å',
            '–†–∏—Ö—Ç–æ–≤—â–∏–∫',
            '–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏–∫',
            '–ò–Ω–∂–µ–∫—Ç–æ—Ä–Ω–∏–∫',
            '–ú–æ—Ç–æ—Ä–∏—Å—Ç',
            '–ú–æ–π—â–∏–∫',
            '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–Ω–∏–∫',
            '–û–ø–µ—Ä–∞—Ç–æ—Ä –ê–ó–°',
        ]
        data['11. –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'] = [
            '‚óÄÔ∏è –ù–∞–∑–∞–¥',
            '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
            '–ö–∞—Å—Å–∏—Ä',
            '–≠–∫–æ–Ω–æ–º–∏—Å—Ç',
            '–ê–Ω–∞–ª–∏—Ç–∏–∫',
            '–ë—Ä–æ–∫–µ—Ä',
            '–¢—Ä–µ–π–¥–µ—Ä',
            '–†–µ–≤–∏–∑–æ—Ä',
            '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º'
        ]
        return data

    @property
    def categories(self):
        return list(map(lambda x: x, self.get_data().keys()))

    @property
    def get_sub_categories(self):
        return list(itertools.chain(*self.get_data().values()))

    def send_categories(self, search=None):
        if search:
            data = []

            for category in self.categories:
                data.append((category, f'search:{category}'))

            return self.send(callback_data=data, inline=True)
        else:
            return self.send(self.categories, inline=True)

    def get_category(self, category: str):
        return defaultdict(list, filter(lambda x: x[0] == category,
                                        self.get_data().items()))

    def send_sub_category(self, category, search=None):
        categories = self.get_category(category=category).get(category, [])

        if search:
            data = []

            for category in categories:
                if category == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
                    data.append((category, category))
                else:
                    data.append((category, f's:{category}'))

            return self.send(callback_data=data, inline=True)
        else:
            return self.send(categories, inline=True)

    def write_to_employer(self):
        texts = ['–ì–¥–µ –∏—Å–∫–∞—Ç—å username?']
        return self.send(texts=texts, inline=True)

    def my_resume(self, resumes):
        data = []
        for resume in resumes:
            if resume.moderation == 2:
                if resume.is_active:
                    data.append(
                        (f"{resume.position[:22]}...",
                         f"resumes:{resume.is_active}:{resume.id}"))
                else:
                    # add icon update
                    data.append((f"üîÑ  {resume.position[:22]}...",
                                 f"resumes:{resume.id}"))

        return self.send(callback_data=data, inline=True)

    def my_vacations(self, vacations):
        data = []
        for vacation in vacations:
            if vacation.moderation == 2:
                if vacation.is_active:
                    data.append(
                        (f"{vacation.position[:22]}...",
                         f"vacations:{vacation.is_active}:{vacation.id}"))
                else:
                    # add icon update
                    data.append(
                        (f"üîÑ  {vacation.position[:22]}...",
                         f"vacations:{vacation.id}"))

        return self.send(callback_data=data, inline=True)

    def view_vacations(self, vacancy):
        if not vacancy.is_active:
            item = ('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', f'v:update:{vacancy.id}')
        else:
            item = ('–£–¥–∞–ª–∏—Ç—å', f'v:del:{vacancy.id}')

        data = [('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'v:return'),
                ('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', f'send:{vacancy.id}'),
                item]

        return self.send(callback_data=data, inline=True)

    def view_resume(self, resume):
        if not resume.is_active:
            item = ('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', f'r:update:{resume.id}')
        else:
            item = ('–£–¥–∞–ª–∏—Ç—å', f'r:del:{resume.id}')

        data = [('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'r:return'), item]

        return self.send(callback_data=data, inline=True)

    def search_vacancy(self):
        texts = ['–û—Ç–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞']
        return self.send(texts, inline=True)

    def publish(self):
        texts = ['‚úÖ –ù–∞—á–∞—Ç—å']
        return self.send(texts, inline=True)

    def my_score(self):
        texts = ['–û–ø–ª–∞—Ç–∏—Ç—å –≤: USD(–¥–æ–ª–ª–∞—Ä)']
        return self.send(texts, inline=True)

    @classmethod
    def pay_buttons(cls):
        return ['–û–ø–ª–∞—Ç–∏—Ç—å 1 $', '–û–ø–ª–∞—Ç–∏—Ç—å 3 $', '–û–ø–ª–∞—Ç–∏—Ç—å 5 $',
                '–û–ø–ª–∞—Ç–∏—Ç—å 10 $', '–û–ø–ª–∞—Ç–∏—Ç—å 25 $']

    def pay(self):
        texts = self.pay_buttons()
        return self.send(texts, inline=True)

    def liq(self, url):
        texts = ['–û–ø–ª–∞—Ç–∏—Ç—å']
        return self.send(texts=texts, inline=True, url=url)

    def city(self):
        texts = ['–û—Ç–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞']
        return self.send(texts=texts, inline=True)

    def experience(self):
        texts = ['–ù–µ—Ç –æ–ø—ã—Ç–∞', '1 –≥–æ–¥', '2 –≥–æ–¥–∞', '3 –≥–æ–¥–∞', '5 –ª–µ—Ç']
        return self.send(texts=texts, inline=True)

    def confirmation_send(self):
        texts = ['‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω']
        return self.send(texts=texts, inline=True)
